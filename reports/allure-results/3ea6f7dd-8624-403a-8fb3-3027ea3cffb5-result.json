{"name": "test_add_account[Sports]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=138.0.7204.185)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff625b5e415+77285]\n\tGetHandleVerifier [0x0x7ff625b5e470+77376]\n\t(No symbol) [0x0x7ff625929a6a]\n\t(No symbol) [0x0x7ff625901f21]\n\t(No symbol) [0x0x7ff6259af9be]\n\t(No symbol) [0x0x7ff6259d0192]\n\t(No symbol) [0x0x7ff6259a83e3]\n\t(No symbol) [0x0x7ff625971521]\n\t(No symbol) [0x0x7ff6259722b3]\n\tGetHandleVerifier [0x0x7ff625e41efd+3107021]\n\tGetHandleVerifier [0x0x7ff625e3c29d+3083373]\n\tGetHandleVerifier [0x0x7ff625e5bedd+3213485]\n\tGetHandleVerifier [0x0x7ff625b7884e+184862]\n\tGetHandleVerifier [0x0x7ff625b8055f+216879]\n\tGetHandleVerifier [0x0x7ff625b67084+113236]\n\tGetHandleVerifier [0x0x7ff625b67239+113673]\n\tGetHandleVerifier [0x0x7ff625b4e298+11368]\n\tBaseThreadInitThunk [0x0x7fffbc0d7374+20]\n\tRtlUserThreadStart [0x0x7fffbdd5cc91+33]", "trace": "browser = None, request = <SubRequest 'preprod_setup' for <Function test_add_account[Enterprise]>>\npreprod_test_data = {'Campaign_name': 'Group campaign', 'Email_message': 'Note,this is single share in Preprod', 'Group_message': 'Note,this is group share in Preprod', 'Single_Share_Company': 'Simform', ...}\n\n    @pytest.fixture(scope='module')\n    def preprod_setup(browser, request,preprod_test_data):\n        driver = get_driver(browser)\n        driver.maximize_window()\n        driver.get(\"https://admin.preprod.ifolio.cloud/login\")\n        request.addfinalizer(driver.quit)\n        lp = Login(driver)\n>       lp.enter_email(preprod_test_data['email'])\n\ntestcases\\preprod_testcases\\conftest.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObject\\preprod\\Login_Page.py:19: in enter_email\n    self.driver.find_element(*Login.Email_xpath).send_keys(email)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001771F3234D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff625b4e298+11368]\\\\n\\\\tBaseThreadInitThunk [0x0x7fffbc0d7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7fffbdd5cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=138.0.7204.185)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff625b5e415+77285]\nE       \tGetHandleVerifier [0x0x7ff625b5e470+77376]\nE       \t(No symbol) [0x0x7ff625929a6a]\nE       \t(No symbol) [0x0x7ff625901f21]\nE       \t(No symbol) [0x0x7ff6259af9be]\nE       \t(No symbol) [0x0x7ff6259d0192]\nE       \t(No symbol) [0x0x7ff6259a83e3]\nE       \t(No symbol) [0x0x7ff625971521]\nE       \t(No symbol) [0x0x7ff6259722b3]\nE       \tGetHandleVerifier [0x0x7ff625e41efd+3107021]\nE       \tGetHandleVerifier [0x0x7ff625e3c29d+3083373]\nE       \tGetHandleVerifier [0x0x7ff625e5bedd+3213485]\nE       \tGetHandleVerifier [0x0x7ff625b7884e+184862]\nE       \tGetHandleVerifier [0x0x7ff625b8055f+216879]\nE       \tGetHandleVerifier [0x0x7ff625b67084+113236]\nE       \tGetHandleVerifier [0x0x7ff625b67239+113673]\nE       \tGetHandleVerifier [0x0x7ff625b4e298+11368]\nE       \tBaseThreadInitThunk [0x0x7fffbc0d7374+20]\nE       \tRtlUserThreadStart [0x0x7fffbdd5cc91+33]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "parameters": [{"name": "account_type", "value": "'Sports'"}], "start": 1754993215508, "stop": 1754993215508, "uuid": "abb4a459-27f0-42bb-97c0-350946b9c2fe", "historyId": "08e3d3d9f859543f9b47bc280c76f76d", "testCaseId": "0aa1d07f7fde4ed2d64291f58d5f67cc", "fullName": "testcases.preprod_testcases.test_admin_account.TestAddAccount#test_add_account", "labels": [{"name": "parentSuite", "value": "testcases.preprod_testcases"}, {"name": "suite", "value": "test_admin_account"}, {"name": "subSuite", "value": "TestAddAccount"}, {"name": "host", "value": "SF-LAP-262"}, {"name": "thread", "value": "14692-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.preprod_testcases.test_admin_account"}], "titlePath": ["testcases", "preprod_testcases", "test_admin_account.py", "TestAddAccount"]}